generator client {
  provider = "prisma-client-js"
   previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comentario {
  id_comentario                                Int      @id @default(autoincrement())
  mensagem                                     String
  status                                       String?  @db.VarChar(9)
  data_comentario                              DateTime @db.Date
  editado                                      Boolean?
  id_produto                                   Int
  id_usuario                                   Int
  id_admin_relator                             Int?
  usuario_comentario_id_admin_relatorTousuario usuario? @relation("comentario_id_admin_relatorTousuario", fields: [id_admin_relator], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  produto                                      produto  @relation(fields: [id_produto], references: [id_produto], onDelete: NoAction, onUpdate: NoAction)
  usuario_comentario_id_usuarioTousuario       usuario  @relation("comentario_id_usuarioTousuario", fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model endereco {
  id_endereco Int     @id @default(autoincrement())
  cep         String?  @db.VarChar(8)
  logradouro  String  @db.VarChar(100)
  numero      String  @db.VarChar(5)
  bairro      String  @db.VarChar(25)
  cidade      String  @db.VarChar(25)
  estado      String  @db.VarChar(2)
  id_usuario  Int
  usuario     usuario @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model produto {
  id_produto                                Int          @id @default(autoincrement())
  nome                                      String       @db.VarChar(50)
  alergia                                   String?
  descricao                                 String?
  ingredientes                              String
  imagem                                    Bytes?
  data_postagem                             DateTime     @db.Date
  editado                                   Boolean?
  status                                    String?      @db.VarChar(9)
  id_usuario                                Int
  id_admin_relator                          Int?
  usuario_produto_id_admin_relatorTousuario usuario?     @relation("produto_id_admin_relatorTousuario", fields: [id_admin_relator], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  usuario_produto_id_usuarioTousuario       usuario      @relation("produto_id_usuarioTousuario", fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  comentario                                comentario[]
}

model usuario {
  id_usuario                                      Int          @id @default(autoincrement())
  nome                                            String       @db.VarChar(50)
  cpf_cnpj                                        String       @unique @db.VarChar(20)
  email                                           String       @db.VarChar(50)
  senha                                           String       @db.VarChar(255)
  nivel                                           String?      @db.VarChar(15)
  nome_social                                     String?      @db.VarChar(50)
  ativo                                           Boolean
  telefone                                        String?      @db.VarChar(11)
  restricao_alimenticia                           String?      @db.VarChar(255)
  comentario_comentario_id_admin_relatorTousuario comentario[] @relation("comentario_id_admin_relatorTousuario")
  comentario_comentario_id_usuarioTousuario       comentario[] @relation("comentario_id_usuarioTousuario")
  endereco                                        endereco[]
  produto_produto_id_admin_relatorTousuario       produto[]    @relation("produto_id_admin_relatorTousuario")
  produto_produto_id_usuarioTousuario             produto[]    @relation("produto_id_usuarioTousuario")
}
